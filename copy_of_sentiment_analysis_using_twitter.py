# -*- coding: utf-8 -*-
"""Copy of Sentiment analysis using twitter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z4dMxCBjVLz3rGXQVBPNLqHkKy4PpTAv
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
data = pd.read_csv('/content/Twitter_Data.csv')  # Replace with the path to your dataset
data = data[['clean_text', 'category']]


# Display the first few rows
print(data.head())

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['clean_text'], data['category'], test_size=0.2, random_state=42)

# Convert text data to a bag-of-words model
vectorizer = CountVectorizer(stop_words='english')
# Clean the data by filling NaN values and ensuring all entries are strings
X_train = X_train.fillna('').astype(str)
X_test = X_test.fillna('').astype(str)

# Convert text data to a bag-of-words model
X_train_vectors = vectorizer.fit_transform(X_train)
X_test_vectors = vectorizer.transform(X_test)

from sklearn.naive_bayes import MultinomialNB

# Import the MultinomialNB class
from sklearn.naive_bayes import MultinomialNB

# Train a Naive Bayes classifier
model = MultinomialNB()
# Ensure that y_train has no missing values and is of the appropriate type
y_train = y_train.fillna(0)  # Replace NaN with a default value if needed (adjust based on your data)
y_train = y_train.astype(int)  # Convert to integer if necessary
model.fit(X_train_vectors, y_train)

from sklearn.metrics import accuracy_score, classification_report

# Clean y_test if necessary
y_test = y_test.fillna(0).astype(int)

# Predict the sentiment on the test set
y_pred = model.predict(X_test_vectors)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(report)

# Example custom tweets
# Initialize an empty list to store user input
new_tweets = []

# Loop to take input from the user (e.g., 3 tweets)
for i in range(3):
    tweet = input(f"Enter tweet {i+1}: ")
    new_tweets.append(tweet)

# Print the list of tweets
print("The tweets you entered are:", new_tweets)

# Transform new tweets to match the vectorizer's format
new_tweets_vectors = vectorizer.transform(new_tweets)

# Predict sentiments for the new tweets
predictions = model.predict(new_tweets_vectors)

# Print the results
#for tweet, sentiment in zip(new_tweets, predictions):
    #print(f'Tweet: {tweet} - Sentiment: {sentiment}')
sentiment_map = {-1: "Negative", 0: "Neutral", 1: "Positive"}
for tweet, sentiment in zip(new_tweets, predictions):
    print(f'Tweet: {tweet} - Sentiment: {sentiment_map[sentiment]}')